// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SecureStore.API.AppDbContext;

#nullable disable

namespace SecureStore.API.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241102224904_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SecureStore.API.Domain.Entities.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Company")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Customer");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7858f993-2ef3-41e0-8e20-cc41c3936161"),
                            Address = "123 Tech Street",
                            Company = "Tech Co",
                            Phone = "123-456-7890",
                            UserId = new Guid("dcc76bfb-750d-4cad-843c-2df443074875")
                        });
                });

            modelBuilder.Entity("SecureStore.API.Domain.Entities.LineItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("LineItem");

                    b.HasData(
                        new
                        {
                            Id = new Guid("98b48a19-e3fc-45b4-89a3-c6747b2dbe6c"),
                            OrderId = new Guid("545a3b9d-2474-4c40-90d5-fb9225bc28d1"),
                            ProductId = new Guid("e0661031-04ed-4bee-8a17-b6ae6bf79526"),
                            Quantity = 1
                        },
                        new
                        {
                            Id = new Guid("72126151-02b6-4846-93dd-e39f7b9543b0"),
                            OrderId = new Guid("545a3b9d-2474-4c40-90d5-fb9225bc28d1"),
                            ProductId = new Guid("ba9bb2d6-6f5f-4f13-82e8-78ab984970f7"),
                            Quantity = 2
                        });
                });

            modelBuilder.Entity("SecureStore.API.Domain.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CustomerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateFilled")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DatePlaced")
                        .HasColumnType("datetime2");

                    b.Property<int>("InvoiceNumber")
                        .HasColumnType("int");

                    b.Property<int>("PaymentStatus")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Term")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Order");

                    b.HasData(
                        new
                        {
                            Id = new Guid("545a3b9d-2474-4c40-90d5-fb9225bc28d1"),
                            Address = "123 Tech Street",
                            CustomerId = new Guid("7858f993-2ef3-41e0-8e20-cc41c3936161"),
                            CustomerName = "Ivan Ivanov",
                            DatePlaced = new DateTime(2024, 11, 3, 2, 49, 4, 264, DateTimeKind.Local).AddTicks(4508),
                            InvoiceNumber = 1001,
                            PaymentStatus = 0,
                            Status = 0,
                            Term = 3
                        });
                });

            modelBuilder.Entity("SecureStore.API.Domain.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DaysToManufacture")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ListPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("StandardCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Product");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e0661031-04ed-4bee-8a17-b6ae6bf79526"),
                            Color = "Black",
                            DaysToManufacture = 5,
                            Description = "Powerful laptop",
                            ListPrice = 800m,
                            Name = "Laptop",
                            StandardCost = 500m,
                            Weight = 2.5m
                        },
                        new
                        {
                            Id = new Guid("ba9bb2d6-6f5f-4f13-82e8-78ab984970f7"),
                            Color = "Blue",
                            DaysToManufacture = 3,
                            Description = "Compact smartphone",
                            ListPrice = 350m,
                            Name = "Smartphone",
                            StandardCost = 200m,
                            Weight = 0.3m
                        });
                });

            modelBuilder.Entity("SecureStore.API.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = new Guid("dcc76bfb-750d-4cad-843c-2df443074875"),
                            CreatedAt = new DateTime(2024, 11, 3, 2, 49, 4, 256, DateTimeKind.Local).AddTicks(4219),
                            Email = "ivan@example.com",
                            FirstName = "Ivan",
                            LastName = "Ivanov",
                            Password = "password123",
                            UpdatedAt = new DateTime(2024, 11, 3, 2, 49, 4, 256, DateTimeKind.Local).AddTicks(4230),
                            UserName = "ivanov"
                        },
                        new
                        {
                            Id = new Guid("3bf3ffe2-5875-422b-ad54-506dc80c5fbd"),
                            CreatedAt = new DateTime(2024, 11, 3, 2, 49, 4, 256, DateTimeKind.Local).AddTicks(4234),
                            Email = "petr@example.com",
                            FirstName = "Petr",
                            LastName = "Petrov",
                            Password = "password456",
                            UpdatedAt = new DateTime(2024, 11, 3, 2, 49, 4, 256, DateTimeKind.Local).AddTicks(4234),
                            UserName = "petrov"
                        });
                });

            modelBuilder.Entity("SecureStore.API.Domain.Entities.Customer", b =>
                {
                    b.HasOne("SecureStore.API.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SecureStore.API.Domain.Entities.LineItem", b =>
                {
                    b.HasOne("SecureStore.API.Domain.Entities.Order", "Order")
                        .WithMany("LineItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecureStore.API.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SecureStore.API.Domain.Entities.Order", b =>
                {
                    b.HasOne("SecureStore.API.Domain.Entities.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("SecureStore.API.Domain.Entities.Customer", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("SecureStore.API.Domain.Entities.Order", b =>
                {
                    b.Navigation("LineItems");
                });
#pragma warning restore 612, 618
        }
    }
}
